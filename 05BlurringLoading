<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blurry Loading</title>
    <style>
       *{
          box-sizing: border-box;
       }

       body{
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        /* overflow: hidden; */
        margin: 0;
       }

       .bg{
           background: url('https://images.unsplash.com/photo-1576161787924-01bb08dad4a4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2104&q=80')
            center/cover;

           position: absolute;
           top: -30px;
           left: -30px;
           width: calc(100vw + 60px);
           height: calc(100vh + 60px);
           z-index: -1;
           filter: blur(0px);

       }

       .loading-text {
          font-size: 50px;
          color: blue;
        }
    </style>
</head>
<body>
    <section class = "bg"></section>
    <div class = "loading-text">0%</div>

    <script type = "module">
       const loadText = document.querySelector('.loading-text');
       const bg = document.querySelector('.bg');

       let load = 0;

       let int = setInterval(blurring, 60);
    //    本身setInterval就能无限执行下去，所以blurring函数有一个if的限制条件


       function blurring(){
          load ++;

          loadText.innerText = `${load}%`

          if(load > 99){
            clearInterval(int);
          }

          loadText.innerText = `${load}%`
          loadText.style.opacity = scale(load, 0, 100, 1, 0)
          bg.style.filter = `blur(${scale(load, 0, 100, 30, 0)}px)`
       }

       const scale = (num, in_min, in_max, out_min, out_max) => {
       return ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min}
    </script>
</body>
</html>
